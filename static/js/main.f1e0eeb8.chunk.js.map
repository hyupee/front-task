{"version":3,"sources":["store/reducers/todo.js","components/Header.jsx","Root.jsx","store/reducers/index.js","store/index.js","store/configure.js","serviceWorker.js","index.js"],"names":["createTodo","createAction","updateTodo","toggleTodo","deleteTodo","initialState","todos","reducer","state","action","produce","draft","type","push","title","payload","checked","idx","splice","HeaderWrap","styled","header","Header","className","to","Todo","lazy","Movie","Root","fallback","exact","path","component","combineReducers","todo","configure","devTools","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","reducers","Boolean","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAA,4JAQaA,EAAaC,YALN,eAMPC,EAAaD,YALN,eAMPE,EAAaF,YALN,eAMPG,EAAaH,YALN,eAOdI,EAAe,CACnBC,MAAO,IAkCMC,IA/BC,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAChD,OAAOC,YAAQF,GAAO,SAAAG,GACpB,OAAQF,EAAOG,MACb,IAjBc,cAuBZ,OALAD,EAAML,MAAMO,KAAK,CACfC,MAAOL,EAAOM,QAAQD,MACtBE,SAAS,IAGJL,EAET,IAxBc,cA2BZ,OAFAA,EAAML,MAAMG,EAAOM,QAAQE,KAAKH,MAAQL,EAAOM,QAAQD,MAEhDH,EAET,IA5Bc,cAiCZ,OAJAA,EAAML,MAAMG,EAAOM,QAAQE,KAAKD,SAAWL,EAAML,MAC/CG,EAAOM,QAAQE,KACfD,QAEKL,EAET,IAlCc,cAqCZ,OAFAA,EAAML,MAAMY,OAAOT,EAAOM,QAAQE,IAAK,GAEhCN,Q,00BCvCf,IAAMQ,E,MAAaC,EAAOC,OAAV,KA8DDC,EAxBA,WACb,OACE,kBAACH,EAAD,KACE,yBAAKI,UAAU,aACb,wBAAIA,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,KAAT,yEAIF,yBAAKD,UAAU,cACb,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,SAAT,mCAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,sBCpDRC,EAAOC,gBAAK,kBAAM,gCAClBC,EAAQD,gBAAK,kBAAM,gCAeVE,EAbF,kBACX,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAS,cACjB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOM,KAAK,QAAQC,UAAWP,IAC/B,kBAAC,IAAD,CAAOM,KAAK,SAASC,UAAWL,Q,wBCZzBM,cAAgB,CAC7BC,WCFaC,ECCG,WAChB,IAAMC,EACJC,OAAOC,8BACPD,OAAOC,+BAET,OAAOC,YAAYC,EAAUJ,GDNhBD,G,MEUKM,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f1e0eeb8.chunk.js","sourcesContent":["import produce from \"immer\";\nimport { createAction } from \"redux-actions\";\n\nconst CREATE_TODO = \"todo/CREATE\";\nconst UPDATE_TODO = \"todo/UPDATE\";\nconst TOGGLE_TODO = \"todo/TOGGLE\";\nconst DELETE_TODO = \"todo/DELETE\";\n\nexport const createTodo = createAction(CREATE_TODO);\nexport const updateTodo = createAction(UPDATE_TODO);\nexport const toggleTodo = createAction(TOGGLE_TODO);\nexport const deleteTodo = createAction(DELETE_TODO);\n\nconst initialState = {\n  todos: []\n};\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case CREATE_TODO:\n        draft.todos.push({\n          title: action.payload.title,\n          checked: false\n        });\n\n        return draft;\n\n      case UPDATE_TODO:\n        draft.todos[action.payload.idx].title = action.payload.title;\n\n        return draft;\n\n      case TOGGLE_TODO:\n        draft.todos[action.payload.idx].checked = !draft.todos[\n          action.payload.idx\n        ].checked;\n\n        return draft;\n\n      case DELETE_TODO:\n        draft.todos.splice(action.payload.idx, 1);\n\n        return draft;\n    }\n  });\n};\n\nexport default reducer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from \"styled-components\";\n\nconst HeaderWrap = styled.header`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #fff;\n  box-shadow: 1px 2px 5px 0 rgba(0, 0, 0, .1);\n  padding: 1rem 0;\n\n  .container {\n    width: 1024px;\n    max-width: 95%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n\n  .logo a {\n    font-weight: bold;\n    font-size: 1.4rem;\n  }\n\n  .navigation {\n    display: flex;\n    align-items: center;\n\n    ul {\n      display: flex;\n      flex-direction: row;\n\n      a {\n        display: inline-block;\n        padding: 0 1rem;\n      }\n    }\n  }\n`;\n\nconst Header = () => {\n  return (\n    <HeaderWrap>\n      <div className=\"container\">\n        <h1 className=\"logo\">\n          <Link to=\"/\">\n            프로그라피 프론트 정상협\n          </Link>\n        </h1>\n        <div className=\"navigation\">\n          <ul>\n            <li>\n              <Link to=\"/todo\">투두리스트</Link>\n            </li>\n            <li>\n              <Link to=\"/movie\">영화</Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </HeaderWrap>\n  )\n}\n\nexport default Header\n","import React, { Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Header from './components/Header';\n\n// lazy-load\nconst Todo = lazy(() => import('./pages/Todo'));\nconst Movie = lazy(() => import('./pages/Movie'));\n\nconst Root = () => (\n  <Router>\n    <Suspense fallback=\"loading...\">\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={Todo} />\n        <Route path=\"/todo\" component={Todo} />\n        <Route path=\"/movie\" component={Movie} />\n      </Switch>\n    </Suspense>\n  </Router>\n);\n\nexport default Root;\n","import { combineReducers } from \"redux\";\nimport todo from \"./todo\";\n\nexport default combineReducers({\n  todo\n});\n","import configure from \"./configure\";\n\nexport default configure();\n","import { createStore } from \"redux\";\nimport reducers from \"./reducers\";\n\nconst configure = () => {\n  const devTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\n  return createStore(reducers, devTools);\n};\n\nexport default configure;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Root from \"./Root\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport \"./styles/reset.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Root />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}